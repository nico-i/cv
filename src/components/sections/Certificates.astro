---
import Card from '@/components/ui/Card.astro';
import Details, {
  type Props as DetailsProps,
} from '@/components/ui/Details.astro';
import SectionTitle from '@/components/ui/SectionTitle.astro';
import Svg from '@/components/ui/Svg.astro';
import Typography from '@/components/ui/Typography.astro';
import Building from '@/svg/building.svg?raw';
import Calendar from '@/svg/calendar-days.svg?raw';
import ShieldCheck from '@/svg/shield-check.svg?raw';
import i18next, { t } from 'i18next';
import type { Certificates, CertificatesQuery } from 'tina/__generated__/types';
import databaseClient from 'tina/__generated__/databaseClient';
import Markdown from '@/components/ui/Markdown.astro';
import ExternalLink from '@/components/ui/ExternalLink.astro';

interface Props extends DetailsProps {
  isPrint?: boolean;
}
const { isPrint = false, ...detailsProps }: Props = Astro.props;
const locale = i18next.language;

const certEdges = (await databaseClient.queries.certificatesConnection({})).data
  .certificatesConnection.edges;
const certs: NonNullable<CertificatesQuery['certificates']>[] = [];

certEdges?.forEach((edge) => {
  if (edge?.node) {
    certs.push(edge.node);
  }
});
---

{
  certs.length > 0 && (
    <Card>
      <Fragment slot="title">
        <SectionTitle title={t('certs')} svgHtml={ShieldCheck} />
      </Fragment>
      <Fragment slot="content">
        {certs?.map((cert) => {
          return (
            <Details {...detailsProps}>
              <Typography variant="large" slot="title">
                {cert?.document ? (
                  <ExternalLink
                    href={cert.document}
                    label={`${t('document')}: ${cert.name}`}
                  >
                    {cert.name}
                  </ExternalLink>
                ) : (
                  cert.name
                )}
              </Typography>
              <div
                class:list={[
                  isPrint
                    ? 'flex flex-row gap-3'
                    : 'flex flex-col lg:flex-row lg:gap-3',
                ]}
                slot="subtitle"
              >
                <Typography variant="muted">
                  <Svg svgHtml={Building} />
                  {cert.issuer}
                </Typography>
                <Typography variant="muted">
                  <Svg svgHtml={Calendar} />
                  {new Date(cert.receivedDate).toLocaleDateString(locale, {
                    year: 'numeric',
                    month: 'long',
                    day: 'numeric',
                  })}
                </Typography>
              </div>
              <Markdown tree={cert.description} slot="content" />
            </Details>
          );
        })}
      </Fragment>
    </Card>
  )
}
