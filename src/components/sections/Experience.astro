---
import Card from '@/components/ui/Card.astro';
import Details, {
  type Props as DetailsProps,
} from '@/components/ui/Details.astro';
import ExternalIconLink from '@/components/ui/ExternalIconLink.astro';
import SectionTitle from '@/components/ui/SectionTitle.astro';
import Svg from '@/components/ui/Svg.astro';
import TimeWindow from '@/components/ui/TimeWindow.astro';
import Typography from '@/components/ui/Typography.astro';
import Building2 from '@/svg/building-2.svg?raw';
import Telescope from '@/svg/telescope.svg?raw';
import databaseClient from 'tina/__generated__/databaseClient';
import { t } from 'i18next';
import type { JobsQuery } from 'tina/__generated__/types';
import Markdown from '@/components/ui/Markdown.astro';

interface Props extends DetailsProps {
  isPrint?: boolean;
}
const { isPrint = false, ...detailsProps }: Props = Astro.props;

const jobEdges = (await databaseClient.queries.jobsConnection({})).data
  .jobsConnection.edges;

const jobs: NonNullable<JobsQuery['jobs']>[] = [];

jobEdges?.forEach((edge) => {
  if (edge?.node) {
    jobsSortedFromNewest.push(edge.node);
  }
});

const jobsSortedFromNewest = jobs.sort((a, b) => {
  const { endDate: aEnd, startDate: aStart } = a;
  const { endDate: bEnd, startDate: bStart } = b;
  const aEndDate = aEnd ? new Date(aEnd).valueOf() : undefined;
  const bEndDate = bEnd ? new Date(bEnd).valueOf() : undefined;
  const aStartDate = new Date(aStart).valueOf();
  const bStartDate = new Date(bStart).valueOf();

  if (aEndDate === undefined && bEndDate === undefined) {
    // If both are ongoing, sort by start date
    return bStartDate - aStartDate;
  }
  if (aEndDate === undefined) {
    // If a is ongoing, put it first
    return -1;
  }
  if (bEndDate === undefined) {
    // If b is ongoing, put it first
    return 1;
  }
  // If both are not ongoing, sort by start date
  return bStartDate - aStartDate;
});
---

{
  jobsSortedFromNewest.length > 0 && (
    <Card>
      <Fragment slot="title">
        <SectionTitle title={t('experience')} svgHtml={Telescope} />
      </Fragment>
      <Fragment slot="content">
        {jobsSortedFromNewest.map((job) => {
          return (
            <Details isCompleted={!job.endDate} asTimeLine {...detailsProps}>
              <Typography variant="large" slot="title">
                {job?.position}
              </Typography>
              <div
                slot="subtitle"
                class:list={[
                  isPrint
                    ? 'flex flex-row gap-3'
                    : 'flex flex-col lg:flex-row lg:gap-3 gap-0.5',
                ]}
              >
                <Typography variant="muted">
                  <Svg svgHtml={Building2} />
                  {job.company}&hairsp;
                  {job?.url && (
                    <ExternalIconLink
                      href={job.url}
                      label={`${job.company} ${t('company-site')}`}
                    />
                  )}
                </Typography>
                <TimeWindow
                  start={new Date(job.startDate)}
                  end={job.endDate ? new Date(job.endDate) : undefined}
                />
              </div>
              <Markdown tree={job.description} slot="content" />
            </Details>
          );
        })}
      </Fragment>
    </Card>
  )
}
