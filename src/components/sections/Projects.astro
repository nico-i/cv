---
import Card from '@/components/ui/Card.astro';
import Details, {
  type Props as DetailsProps,
} from '@/components/ui/Details.astro';
import ExternalIconLink from '@/components/ui/ExternalIconLink.astro';
import SectionTitle from '@/components/ui/SectionTitle.astro';
import TimeWindow from '@/components/ui/TimeWindow.astro';
import Typography from '@/components/ui/Typography.astro';
import PencilRuler from '@/svg/pencil-ruler.svg?raw';
import { t } from 'i18next';
import databaseClient from 'tina/__generated__/databaseClient';
import type { ProjectsQuery } from 'tina/__generated__/types';

interface Props extends DetailsProps {
  isPrint?: boolean;
}
const { isPrint = false, ...detailsProps }: Props = Astro.props;

const projectConnections = (await databaseClient.queries.projectsConnection({}))
  .data.projectsConnection.edges;

const projects: NonNullable<ProjectsQuery['projects']>[] = [];

projectConnections?.forEach((edge) => {
  if (edge?.node) {
    projects.push(edge.node);
  }
});
---

{
  projects.length > 0 && (
    <Card>
      <Fragment slot="title">
        <SectionTitle title={t('projects')} svgHtml={PencilRuler} />
      </Fragment>
      <Fragment slot="content">
        {projects.map((project) => {
          return (
            <Details
              {...detailsProps}
              isCompleted={!project.endDate}
              asTimeLine
            >
              <Typography variant="large" slot="title">
                {project.name}&hairsp;
                {project.demoUrl && (
                  <ExternalIconLink
                    href={project.demoUrl}
                    label={`${t('demo-site')} ${project.demoUrl}`}
                  />
                )}
              </Typography>
              <div
                slot="subtitle"
                class:list={[
                  isPrint
                    ? 'flex flex-row gap-3'
                    : 'flex flex-col lg:flex-row lg:gap-3',
                ]}
              >
                <TimeWindow
                  start={new Date(project.startDate)}
                  end={project.endDate ? new Date(project.endDate) : undefined}
                />
              </div>
              {project.description ? (
                <Fragment slot="content" set:html={project.description} />
              ) : (
                project.tldr
              )}
            </Details>
          );
        })}
      </Fragment>
    </Card>
  )
}
