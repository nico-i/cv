---
import Card from '@/components/ui/Card.astro';
import Details, {
  type Props as DetailsProps,
} from '@/components/ui/Details.astro';
import ExternalIconLink from '@/components/ui/ExternalIconLink.astro';
import Markdown from '@/components/ui/Markdown.astro';
import SectionTitle from '@/components/ui/SectionTitle.astro';
import Svg from '@/components/ui/Svg.astro';
import TimeWindow from '@/components/ui/TimeWindow.astro';
import Typography from '@/components/ui/Typography.astro';
import Building2 from '@/svg/building-2.svg?raw';
import HeartHandshake from '@/svg/heart-handshake.svg?raw';
import { t } from 'i18next';
import databaseClient from 'tina/__generated__/databaseClient';
import type { VolunteerProjectsQuery } from 'tina/__generated__/types';

interface Props extends DetailsProps {}
const detailsProps: Props = Astro.props;

const volunteerProjectConnections = (
  await databaseClient.queries.volunteerProjectsConnection()
).data.volunteerProjectsConnection.edges;

const volunteerProjects: NonNullable<
  VolunteerProjectsQuery['volunteerProjects']
>[] = [];

volunteerProjectConnections?.forEach(
  (edge) => edge?.node && volunteerProjects.push(edge.node),
);
---

{
  volunteerProjects.length > 0 && (
    <Card id="volunteer-work">
      <Fragment slot="title">
        <SectionTitle title={t('volunteerWork')} svgHtml={HeartHandshake} />
      </Fragment>
      <Fragment slot="content">
        {volunteerProjects.map((project) => {
          return (
            <Details
              {...detailsProps}
              isCompleted={!project.endDate}
              asTimeLine
            >
              <Typography variant="large" slot="title">
                {project.role}&thinsp;
                {project.document && (
                  <ExternalIconLink
                    href={project.document}
                    label={`${t('document')}: ${project.role}`}
                  />
                )}
              </Typography>
              <div slot="subtitle" class="flex flex-col gap-0.5">
                <Typography variant="muted">
                  <Svg svgHtml={Building2} />
                  {project.organization}
                </Typography>
                <TimeWindow
                  start={new Date(project.startDate)}
                  end={project.endDate ? new Date(project.endDate) : undefined}
                />
              </div>
              {project.description && (
                <Markdown slot="content" tree={project.description} />
              )}
            </Details>
          );
        })}
      </Fragment>
    </Card>
  )
}
