//@ts-nocheck
  // DO NOT MODIFY THIS FILE. This file is automatically generated by Tina
  export function gql(strings: TemplateStringsArray, ...args: string[]): string {
    let str = ''
    strings.forEach((string, i) => {
      str += string + (args[i] || '')
    })
    return str
  }
  export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
export type MakeEmpty<T extends { [key: string]: unknown }, K extends keyof T> = { [_ in K]?: never };
export type Incremental<T> = T | { [P in keyof T]?: P extends ' $fragmentName' | '__typename' ? T[P] : never };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: { input: string; output: string; }
  String: { input: string; output: string; }
  Boolean: { input: boolean; output: boolean; }
  Int: { input: number; output: number; }
  Float: { input: number; output: number; }
  /** References another document, used as a foreign key */
  Reference: { input: any; output: any; }
  JSON: { input: any; output: any; }
};

export type SystemInfo = {
  __typename?: 'SystemInfo';
  filename: Scalars['String']['output'];
  title?: Maybe<Scalars['String']['output']>;
  basename: Scalars['String']['output'];
  hasReferences?: Maybe<Scalars['Boolean']['output']>;
  breadcrumbs: Array<Scalars['String']['output']>;
  path: Scalars['String']['output'];
  relativePath: Scalars['String']['output'];
  extension: Scalars['String']['output'];
  template: Scalars['String']['output'];
  collection: Collection;
};


export type SystemInfoBreadcrumbsArgs = {
  excludeExtension?: InputMaybe<Scalars['Boolean']['input']>;
};

export type Folder = {
  __typename?: 'Folder';
  name: Scalars['String']['output'];
  path: Scalars['String']['output'];
};

export type PageInfo = {
  __typename?: 'PageInfo';
  hasPreviousPage: Scalars['Boolean']['output'];
  hasNextPage: Scalars['Boolean']['output'];
  startCursor: Scalars['String']['output'];
  endCursor: Scalars['String']['output'];
};

export type Node = {
  id: Scalars['ID']['output'];
};

export type Document = {
  id: Scalars['ID']['output'];
  _sys?: Maybe<SystemInfo>;
  _values: Scalars['JSON']['output'];
};

/** A relay-compliant pagination connection */
export type Connection = {
  totalCount: Scalars['Float']['output'];
  pageInfo: PageInfo;
};

export type Query = {
  __typename?: 'Query';
  getOptimizedQuery?: Maybe<Scalars['String']['output']>;
  collection: Collection;
  collections: Array<Collection>;
  node: Node;
  document: DocumentNode;
  certificates: Certificates;
  certificatesConnection: CertificatesConnection;
  concepts: Concepts;
  conceptsConnection: ConceptsConnection;
  educations: Educations;
  educationsConnection: EducationsConnection;
  frameworks: Frameworks;
  frameworksConnection: FrameworksConnection;
  jobs: Jobs;
  jobsConnection: JobsConnection;
  Languages: Languages;
  LanguagesConnection: LanguagesConnection;
  me: Me;
  meConnection: MeConnection;
  platforms: Platforms;
  platformsConnection: PlatformsConnection;
  progLangs: ProgLangs;
  progLangsConnection: ProgLangsConnection;
  projects: Projects;
  projectsConnection: ProjectsConnection;
  tools: Tools;
  toolsConnection: ToolsConnection;
  user: User;
  authenticate?: Maybe<UserUsers>;
  authorize?: Maybe<UserUsers>;
  userConnection: UserConnection;
  volunteerProjects: VolunteerProjects;
  volunteerProjectsConnection: VolunteerProjectsConnection;
};


export type QueryGetOptimizedQueryArgs = {
  queryString: Scalars['String']['input'];
};


export type QueryCollectionArgs = {
  collection?: InputMaybe<Scalars['String']['input']>;
};


export type QueryNodeArgs = {
  id?: InputMaybe<Scalars['String']['input']>;
};


export type QueryDocumentArgs = {
  collection?: InputMaybe<Scalars['String']['input']>;
  relativePath?: InputMaybe<Scalars['String']['input']>;
};


export type QueryCertificatesArgs = {
  relativePath?: InputMaybe<Scalars['String']['input']>;
};


export type QueryCertificatesConnectionArgs = {
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<CertificatesFilter>;
};


export type QueryConceptsArgs = {
  relativePath?: InputMaybe<Scalars['String']['input']>;
};


export type QueryConceptsConnectionArgs = {
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<ConceptsFilter>;
};


export type QueryEducationsArgs = {
  relativePath?: InputMaybe<Scalars['String']['input']>;
};


export type QueryEducationsConnectionArgs = {
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<EducationsFilter>;
};


export type QueryFrameworksArgs = {
  relativePath?: InputMaybe<Scalars['String']['input']>;
};


export type QueryFrameworksConnectionArgs = {
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<FrameworksFilter>;
};


export type QueryJobsArgs = {
  relativePath?: InputMaybe<Scalars['String']['input']>;
};


export type QueryJobsConnectionArgs = {
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<JobsFilter>;
};


export type QueryLanguagesArgs = {
  relativePath?: InputMaybe<Scalars['String']['input']>;
};


export type QueryLanguagesConnectionArgs = {
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<LanguagesFilter>;
};


export type QueryMeArgs = {
  relativePath?: InputMaybe<Scalars['String']['input']>;
};


export type QueryMeConnectionArgs = {
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<MeFilter>;
};


export type QueryPlatformsArgs = {
  relativePath?: InputMaybe<Scalars['String']['input']>;
};


export type QueryPlatformsConnectionArgs = {
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<PlatformsFilter>;
};


export type QueryProgLangsArgs = {
  relativePath?: InputMaybe<Scalars['String']['input']>;
};


export type QueryProgLangsConnectionArgs = {
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<ProgLangsFilter>;
};


export type QueryProjectsArgs = {
  relativePath?: InputMaybe<Scalars['String']['input']>;
};


export type QueryProjectsConnectionArgs = {
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<ProjectsFilter>;
};


export type QueryToolsArgs = {
  relativePath?: InputMaybe<Scalars['String']['input']>;
};


export type QueryToolsConnectionArgs = {
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<ToolsFilter>;
};


export type QueryUserArgs = {
  relativePath?: InputMaybe<Scalars['String']['input']>;
};


export type QueryAuthenticateArgs = {
  sub: Scalars['String']['input'];
  password: Scalars['String']['input'];
};


export type QueryUserConnectionArgs = {
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<UserFilter>;
};


export type QueryVolunteerProjectsArgs = {
  relativePath?: InputMaybe<Scalars['String']['input']>;
};


export type QueryVolunteerProjectsConnectionArgs = {
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<VolunteerProjectsFilter>;
};

export type DocumentFilter = {
  certificates?: InputMaybe<CertificatesFilter>;
  concepts?: InputMaybe<ConceptsFilter>;
  educations?: InputMaybe<EducationsFilter>;
  frameworks?: InputMaybe<FrameworksFilter>;
  jobs?: InputMaybe<JobsFilter>;
  Languages?: InputMaybe<LanguagesFilter>;
  me?: InputMaybe<MeFilter>;
  platforms?: InputMaybe<PlatformsFilter>;
  progLangs?: InputMaybe<ProgLangsFilter>;
  projects?: InputMaybe<ProjectsFilter>;
  tools?: InputMaybe<ToolsFilter>;
  user?: InputMaybe<UserFilter>;
  volunteerProjects?: InputMaybe<VolunteerProjectsFilter>;
};

export type DocumentConnectionEdges = {
  __typename?: 'DocumentConnectionEdges';
  cursor: Scalars['String']['output'];
  node?: Maybe<DocumentNode>;
};

export type DocumentConnection = Connection & {
  __typename?: 'DocumentConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float']['output'];
  edges?: Maybe<Array<Maybe<DocumentConnectionEdges>>>;
};

export type Collection = {
  __typename?: 'Collection';
  name: Scalars['String']['output'];
  slug: Scalars['String']['output'];
  label?: Maybe<Scalars['String']['output']>;
  path: Scalars['String']['output'];
  format?: Maybe<Scalars['String']['output']>;
  matches?: Maybe<Scalars['String']['output']>;
  templates?: Maybe<Array<Maybe<Scalars['JSON']['output']>>>;
  fields?: Maybe<Array<Maybe<Scalars['JSON']['output']>>>;
  documents: DocumentConnection;
};


export type CollectionDocumentsArgs = {
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<DocumentFilter>;
  folder?: InputMaybe<Scalars['String']['input']>;
};

export type DocumentNode = Certificates | Concepts | Educations | Frameworks | Jobs | Languages | Me | Platforms | ProgLangs | Projects | Tools | User | VolunteerProjects | Folder;

export type Certificates = Node & Document & {
  __typename?: 'Certificates';
  document?: Maybe<Scalars['String']['output']>;
  name: Scalars['String']['output'];
  description: Scalars['JSON']['output'];
  issuer: Scalars['String']['output'];
  receivedDate: Scalars['String']['output'];
  expiresDate?: Maybe<Scalars['String']['output']>;
  url?: Maybe<Scalars['String']['output']>;
  id: Scalars['ID']['output'];
  _sys: SystemInfo;
  _values: Scalars['JSON']['output'];
};

export type ImageFilter = {
  startsWith?: InputMaybe<Scalars['String']['input']>;
  eq?: InputMaybe<Scalars['String']['input']>;
  exists?: InputMaybe<Scalars['Boolean']['input']>;
  in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};

export type StringFilter = {
  startsWith?: InputMaybe<Scalars['String']['input']>;
  eq?: InputMaybe<Scalars['String']['input']>;
  exists?: InputMaybe<Scalars['Boolean']['input']>;
  in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};

export type RichTextFilter = {
  startsWith?: InputMaybe<Scalars['String']['input']>;
  eq?: InputMaybe<Scalars['String']['input']>;
  exists?: InputMaybe<Scalars['Boolean']['input']>;
};

export type DatetimeFilter = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  eq?: InputMaybe<Scalars['String']['input']>;
  exists?: InputMaybe<Scalars['Boolean']['input']>;
  in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};

export type CertificatesFilter = {
  document?: InputMaybe<ImageFilter>;
  name?: InputMaybe<StringFilter>;
  description?: InputMaybe<RichTextFilter>;
  issuer?: InputMaybe<StringFilter>;
  receivedDate?: InputMaybe<DatetimeFilter>;
  expiresDate?: InputMaybe<DatetimeFilter>;
  url?: InputMaybe<StringFilter>;
};

export type CertificatesConnectionEdges = {
  __typename?: 'CertificatesConnectionEdges';
  cursor: Scalars['String']['output'];
  node?: Maybe<Certificates>;
};

export type CertificatesConnection = Connection & {
  __typename?: 'CertificatesConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float']['output'];
  edges?: Maybe<Array<Maybe<CertificatesConnectionEdges>>>;
};

export type Concepts = Node & Document & {
  __typename?: 'Concepts';
  name: Scalars['String']['output'];
  url: Scalars['String']['output'];
  description: Scalars['JSON']['output'];
  proficiency: Scalars['Float']['output'];
  priority: Scalars['Float']['output'];
  id: Scalars['ID']['output'];
  _sys: SystemInfo;
  _values: Scalars['JSON']['output'];
};

export type NumberFilter = {
  lt?: InputMaybe<Scalars['Float']['input']>;
  lte?: InputMaybe<Scalars['Float']['input']>;
  gte?: InputMaybe<Scalars['Float']['input']>;
  gt?: InputMaybe<Scalars['Float']['input']>;
  eq?: InputMaybe<Scalars['Float']['input']>;
  exists?: InputMaybe<Scalars['Boolean']['input']>;
  in?: InputMaybe<Array<InputMaybe<Scalars['Float']['input']>>>;
};

export type ConceptsFilter = {
  name?: InputMaybe<StringFilter>;
  url?: InputMaybe<StringFilter>;
  description?: InputMaybe<RichTextFilter>;
  proficiency?: InputMaybe<NumberFilter>;
  priority?: InputMaybe<NumberFilter>;
};

export type ConceptsConnectionEdges = {
  __typename?: 'ConceptsConnectionEdges';
  cursor: Scalars['String']['output'];
  node?: Maybe<Concepts>;
};

export type ConceptsConnection = Connection & {
  __typename?: 'ConceptsConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float']['output'];
  edges?: Maybe<Array<Maybe<ConceptsConnectionEdges>>>;
};

export type Educations = Node & Document & {
  __typename?: 'Educations';
  document?: Maybe<Scalars['String']['output']>;
  degree: Scalars['String']['output'];
  grade: Scalars['String']['output'];
  startDate: Scalars['String']['output'];
  endDate: Scalars['String']['output'];
  institute: Scalars['String']['output'];
  url: Scalars['String']['output'];
  id: Scalars['ID']['output'];
  _sys: SystemInfo;
  _values: Scalars['JSON']['output'];
};

export type EducationsFilter = {
  document?: InputMaybe<ImageFilter>;
  degree?: InputMaybe<StringFilter>;
  grade?: InputMaybe<StringFilter>;
  startDate?: InputMaybe<DatetimeFilter>;
  endDate?: InputMaybe<DatetimeFilter>;
  institute?: InputMaybe<StringFilter>;
  url?: InputMaybe<StringFilter>;
};

export type EducationsConnectionEdges = {
  __typename?: 'EducationsConnectionEdges';
  cursor: Scalars['String']['output'];
  node?: Maybe<Educations>;
};

export type EducationsConnection = Connection & {
  __typename?: 'EducationsConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float']['output'];
  edges?: Maybe<Array<Maybe<EducationsConnectionEdges>>>;
};

export type Frameworks = Node & Document & {
  __typename?: 'Frameworks';
  icon: Scalars['String']['output'];
  name: Scalars['String']['output'];
  url: Scalars['String']['output'];
  description: Scalars['JSON']['output'];
  proficiency: Scalars['Float']['output'];
  priority: Scalars['Float']['output'];
  id: Scalars['ID']['output'];
  _sys: SystemInfo;
  _values: Scalars['JSON']['output'];
};

export type FrameworksFilter = {
  icon?: InputMaybe<ImageFilter>;
  name?: InputMaybe<StringFilter>;
  url?: InputMaybe<StringFilter>;
  description?: InputMaybe<RichTextFilter>;
  proficiency?: InputMaybe<NumberFilter>;
  priority?: InputMaybe<NumberFilter>;
};

export type FrameworksConnectionEdges = {
  __typename?: 'FrameworksConnectionEdges';
  cursor: Scalars['String']['output'];
  node?: Maybe<Frameworks>;
};

export type FrameworksConnection = Connection & {
  __typename?: 'FrameworksConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float']['output'];
  edges?: Maybe<Array<Maybe<FrameworksConnectionEdges>>>;
};

export type Jobs = Node & Document & {
  __typename?: 'Jobs';
  position: Scalars['String']['output'];
  company: Scalars['String']['output'];
  startDate: Scalars['String']['output'];
  endDate?: Maybe<Scalars['String']['output']>;
  description: Scalars['JSON']['output'];
  url: Scalars['String']['output'];
  id: Scalars['ID']['output'];
  _sys: SystemInfo;
  _values: Scalars['JSON']['output'];
};

export type JobsFilter = {
  position?: InputMaybe<StringFilter>;
  company?: InputMaybe<StringFilter>;
  startDate?: InputMaybe<DatetimeFilter>;
  endDate?: InputMaybe<DatetimeFilter>;
  description?: InputMaybe<RichTextFilter>;
  url?: InputMaybe<StringFilter>;
};

export type JobsConnectionEdges = {
  __typename?: 'JobsConnectionEdges';
  cursor: Scalars['String']['output'];
  node?: Maybe<Jobs>;
};

export type JobsConnection = Connection & {
  __typename?: 'JobsConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float']['output'];
  edges?: Maybe<Array<Maybe<JobsConnectionEdges>>>;
};

export type Languages = Node & Document & {
  __typename?: 'Languages';
  icon: Scalars['String']['output'];
  document?: Maybe<Scalars['String']['output']>;
  name: Scalars['String']['output'];
  level: Scalars['String']['output'];
  id: Scalars['ID']['output'];
  _sys: SystemInfo;
  _values: Scalars['JSON']['output'];
};

export type LanguagesFilter = {
  icon?: InputMaybe<ImageFilter>;
  document?: InputMaybe<ImageFilter>;
  name?: InputMaybe<StringFilter>;
  level?: InputMaybe<StringFilter>;
};

export type LanguagesConnectionEdges = {
  __typename?: 'LanguagesConnectionEdges';
  cursor: Scalars['String']['output'];
  node?: Maybe<Languages>;
};

export type LanguagesConnection = Connection & {
  __typename?: 'LanguagesConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float']['output'];
  edges?: Maybe<Array<Maybe<LanguagesConnectionEdges>>>;
};

export type MeContactLinks = {
  __typename?: 'MeContactLinks';
  icon: Scalars['String']['output'];
  platform: Scalars['String']['output'];
  username: Scalars['String']['output'];
  url: Scalars['String']['output'];
};

export type Me = Node & Document & {
  __typename?: 'Me';
  avatar: Scalars['String']['output'];
  name: Scalars['String']['output'];
  currentPosition: Scalars['String']['output'];
  bio: Scalars['JSON']['output'];
  birthDate: Scalars['String']['output'];
  phone: Scalars['String']['output'];
  residence: Scalars['String']['output'];
  interests?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  contactLinks?: Maybe<Array<Maybe<MeContactLinks>>>;
  id: Scalars['ID']['output'];
  _sys: SystemInfo;
  _values: Scalars['JSON']['output'];
};

export type MeContactLinksFilter = {
  icon?: InputMaybe<ImageFilter>;
  platform?: InputMaybe<StringFilter>;
  username?: InputMaybe<StringFilter>;
  url?: InputMaybe<StringFilter>;
};

export type MeFilter = {
  avatar?: InputMaybe<ImageFilter>;
  name?: InputMaybe<StringFilter>;
  currentPosition?: InputMaybe<StringFilter>;
  bio?: InputMaybe<RichTextFilter>;
  birthDate?: InputMaybe<DatetimeFilter>;
  phone?: InputMaybe<StringFilter>;
  residence?: InputMaybe<StringFilter>;
  interests?: InputMaybe<StringFilter>;
  contactLinks?: InputMaybe<MeContactLinksFilter>;
};

export type MeConnectionEdges = {
  __typename?: 'MeConnectionEdges';
  cursor: Scalars['String']['output'];
  node?: Maybe<Me>;
};

export type MeConnection = Connection & {
  __typename?: 'MeConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float']['output'];
  edges?: Maybe<Array<Maybe<MeConnectionEdges>>>;
};

export type Platforms = Node & Document & {
  __typename?: 'Platforms';
  icon: Scalars['String']['output'];
  name: Scalars['String']['output'];
  url: Scalars['String']['output'];
  description: Scalars['JSON']['output'];
  proficiency: Scalars['Float']['output'];
  priority: Scalars['Float']['output'];
  id: Scalars['ID']['output'];
  _sys: SystemInfo;
  _values: Scalars['JSON']['output'];
};

export type PlatformsFilter = {
  icon?: InputMaybe<ImageFilter>;
  name?: InputMaybe<StringFilter>;
  url?: InputMaybe<StringFilter>;
  description?: InputMaybe<RichTextFilter>;
  proficiency?: InputMaybe<NumberFilter>;
  priority?: InputMaybe<NumberFilter>;
};

export type PlatformsConnectionEdges = {
  __typename?: 'PlatformsConnectionEdges';
  cursor: Scalars['String']['output'];
  node?: Maybe<Platforms>;
};

export type PlatformsConnection = Connection & {
  __typename?: 'PlatformsConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float']['output'];
  edges?: Maybe<Array<Maybe<PlatformsConnectionEdges>>>;
};

export type ProgLangs = Node & Document & {
  __typename?: 'ProgLangs';
  icon: Scalars['String']['output'];
  name: Scalars['String']['output'];
  url: Scalars['String']['output'];
  description: Scalars['JSON']['output'];
  proficiency: Scalars['Float']['output'];
  priority: Scalars['Float']['output'];
  id: Scalars['ID']['output'];
  _sys: SystemInfo;
  _values: Scalars['JSON']['output'];
};

export type ProgLangsFilter = {
  icon?: InputMaybe<ImageFilter>;
  name?: InputMaybe<StringFilter>;
  url?: InputMaybe<StringFilter>;
  description?: InputMaybe<RichTextFilter>;
  proficiency?: InputMaybe<NumberFilter>;
  priority?: InputMaybe<NumberFilter>;
};

export type ProgLangsConnectionEdges = {
  __typename?: 'ProgLangsConnectionEdges';
  cursor: Scalars['String']['output'];
  node?: Maybe<ProgLangs>;
};

export type ProgLangsConnection = Connection & {
  __typename?: 'ProgLangsConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float']['output'];
  edges?: Maybe<Array<Maybe<ProgLangsConnectionEdges>>>;
};

export type ProjectsProgLangsProgrammingLanguage = ProgLangs;

export type ProjectsProgLangs = {
  __typename?: 'ProjectsProgLangs';
  programmingLanguage?: Maybe<ProjectsProgLangsProgrammingLanguage>;
};

export type ProjectsPlatformsPlatform = Platforms;

export type ProjectsPlatforms = {
  __typename?: 'ProjectsPlatforms';
  platform?: Maybe<ProjectsPlatformsPlatform>;
};

export type ProjectsFrameworksFramework = Frameworks;

export type ProjectsFrameworks = {
  __typename?: 'ProjectsFrameworks';
  framework?: Maybe<ProjectsFrameworksFramework>;
};

export type ProjectsToolsTool = Tools;

export type ProjectsTools = {
  __typename?: 'ProjectsTools';
  tool?: Maybe<ProjectsToolsTool>;
};

export type Projects = Node & Document & {
  __typename?: 'Projects';
  heroImage?: Maybe<Scalars['String']['output']>;
  name: Scalars['String']['output'];
  slug: Scalars['String']['output'];
  workHours?: Maybe<Scalars['Float']['output']>;
  tldr?: Maybe<Scalars['JSON']['output']>;
  description: Scalars['JSON']['output'];
  demoUrl?: Maybe<Scalars['String']['output']>;
  startDate: Scalars['String']['output'];
  endDate?: Maybe<Scalars['String']['output']>;
  progLangs?: Maybe<Array<Maybe<ProjectsProgLangs>>>;
  platforms?: Maybe<Array<Maybe<ProjectsPlatforms>>>;
  frameworks?: Maybe<Array<Maybe<ProjectsFrameworks>>>;
  tools?: Maybe<Array<Maybe<ProjectsTools>>>;
  id: Scalars['ID']['output'];
  _sys: SystemInfo;
  _values: Scalars['JSON']['output'];
};

export type ProjectsProgLangsProgrammingLanguageFilter = {
  progLangs?: InputMaybe<ProgLangsFilter>;
};

export type ProjectsProgLangsFilter = {
  programmingLanguage?: InputMaybe<ProjectsProgLangsProgrammingLanguageFilter>;
};

export type ProjectsPlatformsPlatformFilter = {
  platforms?: InputMaybe<PlatformsFilter>;
};

export type ProjectsPlatformsFilter = {
  platform?: InputMaybe<ProjectsPlatformsPlatformFilter>;
};

export type ProjectsFrameworksFrameworkFilter = {
  frameworks?: InputMaybe<FrameworksFilter>;
};

export type ProjectsFrameworksFilter = {
  framework?: InputMaybe<ProjectsFrameworksFrameworkFilter>;
};

export type ProjectsToolsToolFilter = {
  tools?: InputMaybe<ToolsFilter>;
};

export type ProjectsToolsFilter = {
  tool?: InputMaybe<ProjectsToolsToolFilter>;
};

export type ProjectsFilter = {
  heroImage?: InputMaybe<ImageFilter>;
  name?: InputMaybe<StringFilter>;
  slug?: InputMaybe<StringFilter>;
  workHours?: InputMaybe<NumberFilter>;
  tldr?: InputMaybe<RichTextFilter>;
  description?: InputMaybe<RichTextFilter>;
  demoUrl?: InputMaybe<StringFilter>;
  startDate?: InputMaybe<DatetimeFilter>;
  endDate?: InputMaybe<DatetimeFilter>;
  progLangs?: InputMaybe<ProjectsProgLangsFilter>;
  platforms?: InputMaybe<ProjectsPlatformsFilter>;
  frameworks?: InputMaybe<ProjectsFrameworksFilter>;
  tools?: InputMaybe<ProjectsToolsFilter>;
};

export type ProjectsConnectionEdges = {
  __typename?: 'ProjectsConnectionEdges';
  cursor: Scalars['String']['output'];
  node?: Maybe<Projects>;
};

export type ProjectsConnection = Connection & {
  __typename?: 'ProjectsConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float']['output'];
  edges?: Maybe<Array<Maybe<ProjectsConnectionEdges>>>;
};

export type Tools = Node & Document & {
  __typename?: 'Tools';
  icon: Scalars['String']['output'];
  name: Scalars['String']['output'];
  url: Scalars['String']['output'];
  description: Scalars['JSON']['output'];
  proficiency: Scalars['Float']['output'];
  priority: Scalars['Float']['output'];
  id: Scalars['ID']['output'];
  _sys: SystemInfo;
  _values: Scalars['JSON']['output'];
};

export type ToolsFilter = {
  icon?: InputMaybe<ImageFilter>;
  name?: InputMaybe<StringFilter>;
  url?: InputMaybe<StringFilter>;
  description?: InputMaybe<RichTextFilter>;
  proficiency?: InputMaybe<NumberFilter>;
  priority?: InputMaybe<NumberFilter>;
};

export type ToolsConnectionEdges = {
  __typename?: 'ToolsConnectionEdges';
  cursor: Scalars['String']['output'];
  node?: Maybe<Tools>;
};

export type ToolsConnection = Connection & {
  __typename?: 'ToolsConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float']['output'];
  edges?: Maybe<Array<Maybe<ToolsConnectionEdges>>>;
};

export type UserUsersPassword = {
  __typename?: 'UserUsersPassword';
  value: Scalars['String']['output'];
  passwordChangeRequired?: Maybe<Scalars['Boolean']['output']>;
};

export type UserUsers = {
  __typename?: 'UserUsers';
  username: Scalars['String']['output'];
  name?: Maybe<Scalars['String']['output']>;
  email?: Maybe<Scalars['String']['output']>;
  password: UserUsersPassword;
};

export type User = Node & Document & {
  __typename?: 'User';
  users?: Maybe<Array<Maybe<UserUsers>>>;
  id: Scalars['ID']['output'];
  _sys: SystemInfo;
  _values: Scalars['JSON']['output'];
};

export type UserUsersFilter = {
  username?: InputMaybe<StringFilter>;
  name?: InputMaybe<StringFilter>;
  email?: InputMaybe<StringFilter>;
};

export type UserFilter = {
  users?: InputMaybe<UserUsersFilter>;
};

export type UserConnectionEdges = {
  __typename?: 'UserConnectionEdges';
  cursor: Scalars['String']['output'];
  node?: Maybe<User>;
};

export type UserConnection = Connection & {
  __typename?: 'UserConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float']['output'];
  edges?: Maybe<Array<Maybe<UserConnectionEdges>>>;
};

export type VolunteerProjects = Node & Document & {
  __typename?: 'VolunteerProjects';
  document?: Maybe<Scalars['String']['output']>;
  name: Scalars['String']['output'];
  role: Scalars['String']['output'];
  organization: Scalars['String']['output'];
  description: Scalars['JSON']['output'];
  startDate: Scalars['String']['output'];
  endDate?: Maybe<Scalars['String']['output']>;
  id: Scalars['ID']['output'];
  _sys: SystemInfo;
  _values: Scalars['JSON']['output'];
};

export type VolunteerProjectsFilter = {
  document?: InputMaybe<ImageFilter>;
  name?: InputMaybe<StringFilter>;
  role?: InputMaybe<StringFilter>;
  organization?: InputMaybe<StringFilter>;
  description?: InputMaybe<RichTextFilter>;
  startDate?: InputMaybe<DatetimeFilter>;
  endDate?: InputMaybe<DatetimeFilter>;
};

export type VolunteerProjectsConnectionEdges = {
  __typename?: 'VolunteerProjectsConnectionEdges';
  cursor: Scalars['String']['output'];
  node?: Maybe<VolunteerProjects>;
};

export type VolunteerProjectsConnection = Connection & {
  __typename?: 'VolunteerProjectsConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float']['output'];
  edges?: Maybe<Array<Maybe<VolunteerProjectsConnectionEdges>>>;
};

export type Mutation = {
  __typename?: 'Mutation';
  addPendingDocument: DocumentNode;
  updateDocument: DocumentNode;
  deleteDocument: DocumentNode;
  createDocument: DocumentNode;
  createFolder: DocumentNode;
  updateCertificates: Certificates;
  createCertificates: Certificates;
  updateConcepts: Concepts;
  createConcepts: Concepts;
  updateEducations: Educations;
  createEducations: Educations;
  updateFrameworks: Frameworks;
  createFrameworks: Frameworks;
  updateJobs: Jobs;
  createJobs: Jobs;
  updateLanguages: Languages;
  createLanguages: Languages;
  updateMe: Me;
  createMe: Me;
  updatePlatforms: Platforms;
  createPlatforms: Platforms;
  updateProgLangs: ProgLangs;
  createProgLangs: ProgLangs;
  updateProjects: Projects;
  createProjects: Projects;
  updateTools: Tools;
  createTools: Tools;
  updatePassword: Scalars['Boolean']['output'];
  updateUser: User;
  createUser: User;
  updateVolunteerProjects: VolunteerProjects;
  createVolunteerProjects: VolunteerProjects;
};


export type MutationAddPendingDocumentArgs = {
  collection: Scalars['String']['input'];
  relativePath: Scalars['String']['input'];
  template?: InputMaybe<Scalars['String']['input']>;
};


export type MutationUpdateDocumentArgs = {
  collection?: InputMaybe<Scalars['String']['input']>;
  relativePath: Scalars['String']['input'];
  params: DocumentUpdateMutation;
};


export type MutationDeleteDocumentArgs = {
  collection?: InputMaybe<Scalars['String']['input']>;
  relativePath: Scalars['String']['input'];
};


export type MutationCreateDocumentArgs = {
  collection?: InputMaybe<Scalars['String']['input']>;
  relativePath: Scalars['String']['input'];
  params: DocumentMutation;
};


export type MutationCreateFolderArgs = {
  collection?: InputMaybe<Scalars['String']['input']>;
  relativePath: Scalars['String']['input'];
};


export type MutationUpdateCertificatesArgs = {
  relativePath: Scalars['String']['input'];
  params: CertificatesMutation;
};


export type MutationCreateCertificatesArgs = {
  relativePath: Scalars['String']['input'];
  params: CertificatesMutation;
};


export type MutationUpdateConceptsArgs = {
  relativePath: Scalars['String']['input'];
  params: ConceptsMutation;
};


export type MutationCreateConceptsArgs = {
  relativePath: Scalars['String']['input'];
  params: ConceptsMutation;
};


export type MutationUpdateEducationsArgs = {
  relativePath: Scalars['String']['input'];
  params: EducationsMutation;
};


export type MutationCreateEducationsArgs = {
  relativePath: Scalars['String']['input'];
  params: EducationsMutation;
};


export type MutationUpdateFrameworksArgs = {
  relativePath: Scalars['String']['input'];
  params: FrameworksMutation;
};


export type MutationCreateFrameworksArgs = {
  relativePath: Scalars['String']['input'];
  params: FrameworksMutation;
};


export type MutationUpdateJobsArgs = {
  relativePath: Scalars['String']['input'];
  params: JobsMutation;
};


export type MutationCreateJobsArgs = {
  relativePath: Scalars['String']['input'];
  params: JobsMutation;
};


export type MutationUpdateLanguagesArgs = {
  relativePath: Scalars['String']['input'];
  params: LanguagesMutation;
};


export type MutationCreateLanguagesArgs = {
  relativePath: Scalars['String']['input'];
  params: LanguagesMutation;
};


export type MutationUpdateMeArgs = {
  relativePath: Scalars['String']['input'];
  params: MeMutation;
};


export type MutationCreateMeArgs = {
  relativePath: Scalars['String']['input'];
  params: MeMutation;
};


export type MutationUpdatePlatformsArgs = {
  relativePath: Scalars['String']['input'];
  params: PlatformsMutation;
};


export type MutationCreatePlatformsArgs = {
  relativePath: Scalars['String']['input'];
  params: PlatformsMutation;
};


export type MutationUpdateProgLangsArgs = {
  relativePath: Scalars['String']['input'];
  params: ProgLangsMutation;
};


export type MutationCreateProgLangsArgs = {
  relativePath: Scalars['String']['input'];
  params: ProgLangsMutation;
};


export type MutationUpdateProjectsArgs = {
  relativePath: Scalars['String']['input'];
  params: ProjectsMutation;
};


export type MutationCreateProjectsArgs = {
  relativePath: Scalars['String']['input'];
  params: ProjectsMutation;
};


export type MutationUpdateToolsArgs = {
  relativePath: Scalars['String']['input'];
  params: ToolsMutation;
};


export type MutationCreateToolsArgs = {
  relativePath: Scalars['String']['input'];
  params: ToolsMutation;
};


export type MutationUpdatePasswordArgs = {
  password: Scalars['String']['input'];
};


export type MutationUpdateUserArgs = {
  relativePath: Scalars['String']['input'];
  params: UserMutation;
};


export type MutationCreateUserArgs = {
  relativePath: Scalars['String']['input'];
  params: UserMutation;
};


export type MutationUpdateVolunteerProjectsArgs = {
  relativePath: Scalars['String']['input'];
  params: VolunteerProjectsMutation;
};


export type MutationCreateVolunteerProjectsArgs = {
  relativePath: Scalars['String']['input'];
  params: VolunteerProjectsMutation;
};

export type DocumentUpdateMutation = {
  certificates?: InputMaybe<CertificatesMutation>;
  concepts?: InputMaybe<ConceptsMutation>;
  educations?: InputMaybe<EducationsMutation>;
  frameworks?: InputMaybe<FrameworksMutation>;
  jobs?: InputMaybe<JobsMutation>;
  Languages?: InputMaybe<LanguagesMutation>;
  me?: InputMaybe<MeMutation>;
  platforms?: InputMaybe<PlatformsMutation>;
  progLangs?: InputMaybe<ProgLangsMutation>;
  projects?: InputMaybe<ProjectsMutation>;
  tools?: InputMaybe<ToolsMutation>;
  user?: InputMaybe<UserMutation>;
  volunteerProjects?: InputMaybe<VolunteerProjectsMutation>;
  relativePath?: InputMaybe<Scalars['String']['input']>;
};

export type DocumentMutation = {
  certificates?: InputMaybe<CertificatesMutation>;
  concepts?: InputMaybe<ConceptsMutation>;
  educations?: InputMaybe<EducationsMutation>;
  frameworks?: InputMaybe<FrameworksMutation>;
  jobs?: InputMaybe<JobsMutation>;
  Languages?: InputMaybe<LanguagesMutation>;
  me?: InputMaybe<MeMutation>;
  platforms?: InputMaybe<PlatformsMutation>;
  progLangs?: InputMaybe<ProgLangsMutation>;
  projects?: InputMaybe<ProjectsMutation>;
  tools?: InputMaybe<ToolsMutation>;
  user?: InputMaybe<UserMutation>;
  volunteerProjects?: InputMaybe<VolunteerProjectsMutation>;
};

export type CertificatesMutation = {
  document?: InputMaybe<Scalars['String']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  description?: InputMaybe<Scalars['JSON']['input']>;
  issuer?: InputMaybe<Scalars['String']['input']>;
  receivedDate?: InputMaybe<Scalars['String']['input']>;
  expiresDate?: InputMaybe<Scalars['String']['input']>;
  url?: InputMaybe<Scalars['String']['input']>;
};

export type ConceptsMutation = {
  name?: InputMaybe<Scalars['String']['input']>;
  url?: InputMaybe<Scalars['String']['input']>;
  description?: InputMaybe<Scalars['JSON']['input']>;
  proficiency?: InputMaybe<Scalars['Float']['input']>;
  priority?: InputMaybe<Scalars['Float']['input']>;
};

export type EducationsMutation = {
  document?: InputMaybe<Scalars['String']['input']>;
  degree?: InputMaybe<Scalars['String']['input']>;
  grade?: InputMaybe<Scalars['String']['input']>;
  startDate?: InputMaybe<Scalars['String']['input']>;
  endDate?: InputMaybe<Scalars['String']['input']>;
  institute?: InputMaybe<Scalars['String']['input']>;
  url?: InputMaybe<Scalars['String']['input']>;
};

export type FrameworksMutation = {
  icon?: InputMaybe<Scalars['String']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  url?: InputMaybe<Scalars['String']['input']>;
  description?: InputMaybe<Scalars['JSON']['input']>;
  proficiency?: InputMaybe<Scalars['Float']['input']>;
  priority?: InputMaybe<Scalars['Float']['input']>;
};

export type JobsMutation = {
  position?: InputMaybe<Scalars['String']['input']>;
  company?: InputMaybe<Scalars['String']['input']>;
  startDate?: InputMaybe<Scalars['String']['input']>;
  endDate?: InputMaybe<Scalars['String']['input']>;
  description?: InputMaybe<Scalars['JSON']['input']>;
  url?: InputMaybe<Scalars['String']['input']>;
};

export type LanguagesMutation = {
  icon?: InputMaybe<Scalars['String']['input']>;
  document?: InputMaybe<Scalars['String']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  level?: InputMaybe<Scalars['String']['input']>;
};

export type MeContactLinksMutation = {
  icon?: InputMaybe<Scalars['String']['input']>;
  platform?: InputMaybe<Scalars['String']['input']>;
  username?: InputMaybe<Scalars['String']['input']>;
  url?: InputMaybe<Scalars['String']['input']>;
};

export type MeMutation = {
  avatar?: InputMaybe<Scalars['String']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  currentPosition?: InputMaybe<Scalars['String']['input']>;
  bio?: InputMaybe<Scalars['JSON']['input']>;
  birthDate?: InputMaybe<Scalars['String']['input']>;
  phone?: InputMaybe<Scalars['String']['input']>;
  residence?: InputMaybe<Scalars['String']['input']>;
  interests?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  contactLinks?: InputMaybe<Array<InputMaybe<MeContactLinksMutation>>>;
};

export type PlatformsMutation = {
  icon?: InputMaybe<Scalars['String']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  url?: InputMaybe<Scalars['String']['input']>;
  description?: InputMaybe<Scalars['JSON']['input']>;
  proficiency?: InputMaybe<Scalars['Float']['input']>;
  priority?: InputMaybe<Scalars['Float']['input']>;
};

export type ProgLangsMutation = {
  icon?: InputMaybe<Scalars['String']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  url?: InputMaybe<Scalars['String']['input']>;
  description?: InputMaybe<Scalars['JSON']['input']>;
  proficiency?: InputMaybe<Scalars['Float']['input']>;
  priority?: InputMaybe<Scalars['Float']['input']>;
};

export type ProjectsProgLangsMutation = {
  programmingLanguage?: InputMaybe<Scalars['String']['input']>;
};

export type ProjectsPlatformsMutation = {
  platform?: InputMaybe<Scalars['String']['input']>;
};

export type ProjectsFrameworksMutation = {
  framework?: InputMaybe<Scalars['String']['input']>;
};

export type ProjectsToolsMutation = {
  tool?: InputMaybe<Scalars['String']['input']>;
};

export type ProjectsMutation = {
  heroImage?: InputMaybe<Scalars['String']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  slug?: InputMaybe<Scalars['String']['input']>;
  workHours?: InputMaybe<Scalars['Float']['input']>;
  tldr?: InputMaybe<Scalars['JSON']['input']>;
  description?: InputMaybe<Scalars['JSON']['input']>;
  demoUrl?: InputMaybe<Scalars['String']['input']>;
  startDate?: InputMaybe<Scalars['String']['input']>;
  endDate?: InputMaybe<Scalars['String']['input']>;
  progLangs?: InputMaybe<Array<InputMaybe<ProjectsProgLangsMutation>>>;
  platforms?: InputMaybe<Array<InputMaybe<ProjectsPlatformsMutation>>>;
  frameworks?: InputMaybe<Array<InputMaybe<ProjectsFrameworksMutation>>>;
  tools?: InputMaybe<Array<InputMaybe<ProjectsToolsMutation>>>;
};

export type ToolsMutation = {
  icon?: InputMaybe<Scalars['String']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  url?: InputMaybe<Scalars['String']['input']>;
  description?: InputMaybe<Scalars['JSON']['input']>;
  proficiency?: InputMaybe<Scalars['Float']['input']>;
  priority?: InputMaybe<Scalars['Float']['input']>;
};

export type UserUsersPasswordMutation = {
  value?: InputMaybe<Scalars['String']['input']>;
  passwordChangeRequired: Scalars['Boolean']['input'];
};

export type UserUsersMutation = {
  username?: InputMaybe<Scalars['String']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  email?: InputMaybe<Scalars['String']['input']>;
  password?: InputMaybe<UserUsersPasswordMutation>;
};

export type UserMutation = {
  users?: InputMaybe<Array<InputMaybe<UserUsersMutation>>>;
};

export type VolunteerProjectsMutation = {
  document?: InputMaybe<Scalars['String']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  role?: InputMaybe<Scalars['String']['input']>;
  organization?: InputMaybe<Scalars['String']['input']>;
  description?: InputMaybe<Scalars['JSON']['input']>;
  startDate?: InputMaybe<Scalars['String']['input']>;
  endDate?: InputMaybe<Scalars['String']['input']>;
};

export type CertificatesPartsFragment = { __typename: 'Certificates', document?: string | null, name: string, description: any, issuer: string, receivedDate: string, expiresDate?: string | null, url?: string | null };

export type ConceptsPartsFragment = { __typename: 'Concepts', name: string, url: string, description: any, proficiency: number, priority: number };

export type EducationsPartsFragment = { __typename: 'Educations', document?: string | null, degree: string, grade: string, startDate: string, endDate: string, institute: string, url: string };

export type FrameworksPartsFragment = { __typename: 'Frameworks', icon: string, name: string, url: string, description: any, proficiency: number, priority: number };

export type JobsPartsFragment = { __typename: 'Jobs', position: string, company: string, startDate: string, endDate?: string | null, description: any, url: string };

export type LanguagesPartsFragment = { __typename: 'Languages', icon: string, document?: string | null, name: string, level: string };

export type MePartsFragment = { __typename: 'Me', avatar: string, name: string, currentPosition: string, bio: any, birthDate: string, phone: string, residence: string, interests?: Array<string | null> | null, contactLinks?: Array<{ __typename: 'MeContactLinks', icon: string, platform: string, username: string, url: string } | null> | null };

export type PlatformsPartsFragment = { __typename: 'Platforms', icon: string, name: string, url: string, description: any, proficiency: number, priority: number };

export type ProgLangsPartsFragment = { __typename: 'ProgLangs', icon: string, name: string, url: string, description: any, proficiency: number, priority: number };

export type ProjectsPartsFragment = { __typename: 'Projects', heroImage?: string | null, name: string, slug: string, workHours?: number | null, tldr?: any | null, description: any, demoUrl?: string | null, startDate: string, endDate?: string | null, progLangs?: Array<{ __typename: 'ProjectsProgLangs', programmingLanguage?: { __typename: 'ProgLangs', icon: string, name: string, url: string, description: any, proficiency: number, priority: number, id: string, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string } } | null } | null> | null, platforms?: Array<{ __typename: 'ProjectsPlatforms', platform?: { __typename: 'Platforms', icon: string, name: string, url: string, description: any, proficiency: number, priority: number, id: string, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string } } | null } | null> | null, frameworks?: Array<{ __typename: 'ProjectsFrameworks', framework?: { __typename: 'Frameworks', icon: string, name: string, url: string, description: any, proficiency: number, priority: number, id: string, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string } } | null } | null> | null, tools?: Array<{ __typename: 'ProjectsTools', tool?: { __typename: 'Tools', icon: string, name: string, url: string, description: any, proficiency: number, priority: number, id: string, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string } } | null } | null> | null };

export type ToolsPartsFragment = { __typename: 'Tools', icon: string, name: string, url: string, description: any, proficiency: number, priority: number };

export type UserPartsFragment = { __typename: 'User', users?: Array<{ __typename: 'UserUsers', username: string, name?: string | null, email?: string | null, password: { __typename?: 'UserUsersPassword', value: string, passwordChangeRequired?: boolean | null } } | null> | null };

export type VolunteerProjectsPartsFragment = { __typename: 'VolunteerProjects', document?: string | null, name: string, role: string, organization: string, description: any, startDate: string, endDate?: string | null };

export type CertificatesQueryVariables = Exact<{
  relativePath: Scalars['String']['input'];
}>;


export type CertificatesQuery = { __typename?: 'Query', certificates: { __typename: 'Certificates', id: string, document?: string | null, name: string, description: any, issuer: string, receivedDate: string, expiresDate?: string | null, url?: string | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string } } };

export type CertificatesConnectionQueryVariables = Exact<{
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<CertificatesFilter>;
}>;


export type CertificatesConnectionQuery = { __typename?: 'Query', certificatesConnection: { __typename?: 'CertificatesConnection', totalCount: number, pageInfo: { __typename?: 'PageInfo', hasPreviousPage: boolean, hasNextPage: boolean, startCursor: string, endCursor: string }, edges?: Array<{ __typename?: 'CertificatesConnectionEdges', cursor: string, node?: { __typename: 'Certificates', id: string, document?: string | null, name: string, description: any, issuer: string, receivedDate: string, expiresDate?: string | null, url?: string | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string } } | null } | null> | null } };

export type ConceptsQueryVariables = Exact<{
  relativePath: Scalars['String']['input'];
}>;


export type ConceptsQuery = { __typename?: 'Query', concepts: { __typename: 'Concepts', id: string, name: string, url: string, description: any, proficiency: number, priority: number, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string } } };

export type ConceptsConnectionQueryVariables = Exact<{
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<ConceptsFilter>;
}>;


export type ConceptsConnectionQuery = { __typename?: 'Query', conceptsConnection: { __typename?: 'ConceptsConnection', totalCount: number, pageInfo: { __typename?: 'PageInfo', hasPreviousPage: boolean, hasNextPage: boolean, startCursor: string, endCursor: string }, edges?: Array<{ __typename?: 'ConceptsConnectionEdges', cursor: string, node?: { __typename: 'Concepts', id: string, name: string, url: string, description: any, proficiency: number, priority: number, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string } } | null } | null> | null } };

export type EducationsQueryVariables = Exact<{
  relativePath: Scalars['String']['input'];
}>;


export type EducationsQuery = { __typename?: 'Query', educations: { __typename: 'Educations', id: string, document?: string | null, degree: string, grade: string, startDate: string, endDate: string, institute: string, url: string, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string } } };

export type EducationsConnectionQueryVariables = Exact<{
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<EducationsFilter>;
}>;


export type EducationsConnectionQuery = { __typename?: 'Query', educationsConnection: { __typename?: 'EducationsConnection', totalCount: number, pageInfo: { __typename?: 'PageInfo', hasPreviousPage: boolean, hasNextPage: boolean, startCursor: string, endCursor: string }, edges?: Array<{ __typename?: 'EducationsConnectionEdges', cursor: string, node?: { __typename: 'Educations', id: string, document?: string | null, degree: string, grade: string, startDate: string, endDate: string, institute: string, url: string, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string } } | null } | null> | null } };

export type FrameworksQueryVariables = Exact<{
  relativePath: Scalars['String']['input'];
}>;


export type FrameworksQuery = { __typename?: 'Query', frameworks: { __typename: 'Frameworks', id: string, icon: string, name: string, url: string, description: any, proficiency: number, priority: number, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string } } };

export type FrameworksConnectionQueryVariables = Exact<{
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<FrameworksFilter>;
}>;


export type FrameworksConnectionQuery = { __typename?: 'Query', frameworksConnection: { __typename?: 'FrameworksConnection', totalCount: number, pageInfo: { __typename?: 'PageInfo', hasPreviousPage: boolean, hasNextPage: boolean, startCursor: string, endCursor: string }, edges?: Array<{ __typename?: 'FrameworksConnectionEdges', cursor: string, node?: { __typename: 'Frameworks', id: string, icon: string, name: string, url: string, description: any, proficiency: number, priority: number, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string } } | null } | null> | null } };

export type JobsQueryVariables = Exact<{
  relativePath: Scalars['String']['input'];
}>;


export type JobsQuery = { __typename?: 'Query', jobs: { __typename: 'Jobs', id: string, position: string, company: string, startDate: string, endDate?: string | null, description: any, url: string, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string } } };

export type JobsConnectionQueryVariables = Exact<{
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<JobsFilter>;
}>;


export type JobsConnectionQuery = { __typename?: 'Query', jobsConnection: { __typename?: 'JobsConnection', totalCount: number, pageInfo: { __typename?: 'PageInfo', hasPreviousPage: boolean, hasNextPage: boolean, startCursor: string, endCursor: string }, edges?: Array<{ __typename?: 'JobsConnectionEdges', cursor: string, node?: { __typename: 'Jobs', id: string, position: string, company: string, startDate: string, endDate?: string | null, description: any, url: string, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string } } | null } | null> | null } };

export type LanguagesQueryVariables = Exact<{
  relativePath: Scalars['String']['input'];
}>;


export type LanguagesQuery = { __typename?: 'Query', Languages: { __typename: 'Languages', id: string, icon: string, document?: string | null, name: string, level: string, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string } } };

export type LanguagesConnectionQueryVariables = Exact<{
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<LanguagesFilter>;
}>;


export type LanguagesConnectionQuery = { __typename?: 'Query', LanguagesConnection: { __typename?: 'LanguagesConnection', totalCount: number, pageInfo: { __typename?: 'PageInfo', hasPreviousPage: boolean, hasNextPage: boolean, startCursor: string, endCursor: string }, edges?: Array<{ __typename?: 'LanguagesConnectionEdges', cursor: string, node?: { __typename: 'Languages', id: string, icon: string, document?: string | null, name: string, level: string, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string } } | null } | null> | null } };

export type MeQueryVariables = Exact<{
  relativePath: Scalars['String']['input'];
}>;


export type MeQuery = { __typename?: 'Query', me: { __typename: 'Me', id: string, avatar: string, name: string, currentPosition: string, bio: any, birthDate: string, phone: string, residence: string, interests?: Array<string | null> | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, contactLinks?: Array<{ __typename: 'MeContactLinks', icon: string, platform: string, username: string, url: string } | null> | null } };

export type MeConnectionQueryVariables = Exact<{
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<MeFilter>;
}>;


export type MeConnectionQuery = { __typename?: 'Query', meConnection: { __typename?: 'MeConnection', totalCount: number, pageInfo: { __typename?: 'PageInfo', hasPreviousPage: boolean, hasNextPage: boolean, startCursor: string, endCursor: string }, edges?: Array<{ __typename?: 'MeConnectionEdges', cursor: string, node?: { __typename: 'Me', id: string, avatar: string, name: string, currentPosition: string, bio: any, birthDate: string, phone: string, residence: string, interests?: Array<string | null> | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, contactLinks?: Array<{ __typename: 'MeContactLinks', icon: string, platform: string, username: string, url: string } | null> | null } | null } | null> | null } };

export type PlatformsQueryVariables = Exact<{
  relativePath: Scalars['String']['input'];
}>;


export type PlatformsQuery = { __typename?: 'Query', platforms: { __typename: 'Platforms', id: string, icon: string, name: string, url: string, description: any, proficiency: number, priority: number, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string } } };

export type PlatformsConnectionQueryVariables = Exact<{
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<PlatformsFilter>;
}>;


export type PlatformsConnectionQuery = { __typename?: 'Query', platformsConnection: { __typename?: 'PlatformsConnection', totalCount: number, pageInfo: { __typename?: 'PageInfo', hasPreviousPage: boolean, hasNextPage: boolean, startCursor: string, endCursor: string }, edges?: Array<{ __typename?: 'PlatformsConnectionEdges', cursor: string, node?: { __typename: 'Platforms', id: string, icon: string, name: string, url: string, description: any, proficiency: number, priority: number, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string } } | null } | null> | null } };

export type ProgLangsQueryVariables = Exact<{
  relativePath: Scalars['String']['input'];
}>;


export type ProgLangsQuery = { __typename?: 'Query', progLangs: { __typename: 'ProgLangs', id: string, icon: string, name: string, url: string, description: any, proficiency: number, priority: number, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string } } };

export type ProgLangsConnectionQueryVariables = Exact<{
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<ProgLangsFilter>;
}>;


export type ProgLangsConnectionQuery = { __typename?: 'Query', progLangsConnection: { __typename?: 'ProgLangsConnection', totalCount: number, pageInfo: { __typename?: 'PageInfo', hasPreviousPage: boolean, hasNextPage: boolean, startCursor: string, endCursor: string }, edges?: Array<{ __typename?: 'ProgLangsConnectionEdges', cursor: string, node?: { __typename: 'ProgLangs', id: string, icon: string, name: string, url: string, description: any, proficiency: number, priority: number, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string } } | null } | null> | null } };

export type ProjectsQueryVariables = Exact<{
  relativePath: Scalars['String']['input'];
}>;


export type ProjectsQuery = { __typename?: 'Query', projects: { __typename: 'Projects', id: string, heroImage?: string | null, name: string, slug: string, workHours?: number | null, tldr?: any | null, description: any, demoUrl?: string | null, startDate: string, endDate?: string | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, progLangs?: Array<{ __typename: 'ProjectsProgLangs', programmingLanguage?: { __typename: 'ProgLangs', icon: string, name: string, url: string, description: any, proficiency: number, priority: number, id: string, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string } } | null } | null> | null, platforms?: Array<{ __typename: 'ProjectsPlatforms', platform?: { __typename: 'Platforms', icon: string, name: string, url: string, description: any, proficiency: number, priority: number, id: string, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string } } | null } | null> | null, frameworks?: Array<{ __typename: 'ProjectsFrameworks', framework?: { __typename: 'Frameworks', icon: string, name: string, url: string, description: any, proficiency: number, priority: number, id: string, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string } } | null } | null> | null, tools?: Array<{ __typename: 'ProjectsTools', tool?: { __typename: 'Tools', icon: string, name: string, url: string, description: any, proficiency: number, priority: number, id: string, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string } } | null } | null> | null } };

export type ProjectsConnectionQueryVariables = Exact<{
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<ProjectsFilter>;
}>;


export type ProjectsConnectionQuery = { __typename?: 'Query', projectsConnection: { __typename?: 'ProjectsConnection', totalCount: number, pageInfo: { __typename?: 'PageInfo', hasPreviousPage: boolean, hasNextPage: boolean, startCursor: string, endCursor: string }, edges?: Array<{ __typename?: 'ProjectsConnectionEdges', cursor: string, node?: { __typename: 'Projects', id: string, heroImage?: string | null, name: string, slug: string, workHours?: number | null, tldr?: any | null, description: any, demoUrl?: string | null, startDate: string, endDate?: string | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, progLangs?: Array<{ __typename: 'ProjectsProgLangs', programmingLanguage?: { __typename: 'ProgLangs', icon: string, name: string, url: string, description: any, proficiency: number, priority: number, id: string, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string } } | null } | null> | null, platforms?: Array<{ __typename: 'ProjectsPlatforms', platform?: { __typename: 'Platforms', icon: string, name: string, url: string, description: any, proficiency: number, priority: number, id: string, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string } } | null } | null> | null, frameworks?: Array<{ __typename: 'ProjectsFrameworks', framework?: { __typename: 'Frameworks', icon: string, name: string, url: string, description: any, proficiency: number, priority: number, id: string, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string } } | null } | null> | null, tools?: Array<{ __typename: 'ProjectsTools', tool?: { __typename: 'Tools', icon: string, name: string, url: string, description: any, proficiency: number, priority: number, id: string, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string } } | null } | null> | null } | null } | null> | null } };

export type ToolsQueryVariables = Exact<{
  relativePath: Scalars['String']['input'];
}>;


export type ToolsQuery = { __typename?: 'Query', tools: { __typename: 'Tools', id: string, icon: string, name: string, url: string, description: any, proficiency: number, priority: number, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string } } };

export type ToolsConnectionQueryVariables = Exact<{
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<ToolsFilter>;
}>;


export type ToolsConnectionQuery = { __typename?: 'Query', toolsConnection: { __typename?: 'ToolsConnection', totalCount: number, pageInfo: { __typename?: 'PageInfo', hasPreviousPage: boolean, hasNextPage: boolean, startCursor: string, endCursor: string }, edges?: Array<{ __typename?: 'ToolsConnectionEdges', cursor: string, node?: { __typename: 'Tools', id: string, icon: string, name: string, url: string, description: any, proficiency: number, priority: number, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string } } | null } | null> | null } };

export type UserQueryVariables = Exact<{
  relativePath: Scalars['String']['input'];
}>;


export type UserQuery = { __typename?: 'Query', user: { __typename: 'User', id: string, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, users?: Array<{ __typename: 'UserUsers', username: string, name?: string | null, email?: string | null, password: { __typename?: 'UserUsersPassword', value: string, passwordChangeRequired?: boolean | null } } | null> | null } };

export type UserConnectionQueryVariables = Exact<{
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<UserFilter>;
}>;


export type UserConnectionQuery = { __typename?: 'Query', userConnection: { __typename?: 'UserConnection', totalCount: number, pageInfo: { __typename?: 'PageInfo', hasPreviousPage: boolean, hasNextPage: boolean, startCursor: string, endCursor: string }, edges?: Array<{ __typename?: 'UserConnectionEdges', cursor: string, node?: { __typename: 'User', id: string, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, users?: Array<{ __typename: 'UserUsers', username: string, name?: string | null, email?: string | null, password: { __typename?: 'UserUsersPassword', value: string, passwordChangeRequired?: boolean | null } } | null> | null } | null } | null> | null } };

export type VolunteerProjectsQueryVariables = Exact<{
  relativePath: Scalars['String']['input'];
}>;


export type VolunteerProjectsQuery = { __typename?: 'Query', volunteerProjects: { __typename: 'VolunteerProjects', id: string, document?: string | null, name: string, role: string, organization: string, description: any, startDate: string, endDate?: string | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string } } };

export type VolunteerProjectsConnectionQueryVariables = Exact<{
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<VolunteerProjectsFilter>;
}>;


export type VolunteerProjectsConnectionQuery = { __typename?: 'Query', volunteerProjectsConnection: { __typename?: 'VolunteerProjectsConnection', totalCount: number, pageInfo: { __typename?: 'PageInfo', hasPreviousPage: boolean, hasNextPage: boolean, startCursor: string, endCursor: string }, edges?: Array<{ __typename?: 'VolunteerProjectsConnectionEdges', cursor: string, node?: { __typename: 'VolunteerProjects', id: string, document?: string | null, name: string, role: string, organization: string, description: any, startDate: string, endDate?: string | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string } } | null } | null> | null } };

export const CertificatesPartsFragmentDoc = gql`
    fragment CertificatesParts on Certificates {
  __typename
  document
  name
  description
  issuer
  receivedDate
  expiresDate
  url
}
    `;
export const ConceptsPartsFragmentDoc = gql`
    fragment ConceptsParts on Concepts {
  __typename
  name
  url
  description
  proficiency
  priority
}
    `;
export const EducationsPartsFragmentDoc = gql`
    fragment EducationsParts on Educations {
  __typename
  document
  degree
  grade
  startDate
  endDate
  institute
  url
}
    `;
export const FrameworksPartsFragmentDoc = gql`
    fragment FrameworksParts on Frameworks {
  __typename
  icon
  name
  url
  description
  proficiency
  priority
}
    `;
export const JobsPartsFragmentDoc = gql`
    fragment JobsParts on Jobs {
  __typename
  position
  company
  startDate
  endDate
  description
  url
}
    `;
export const LanguagesPartsFragmentDoc = gql`
    fragment LanguagesParts on Languages {
  __typename
  icon
  document
  name
  level
}
    `;
export const MePartsFragmentDoc = gql`
    fragment MeParts on Me {
  __typename
  avatar
  name
  currentPosition
  bio
  birthDate
  phone
  residence
  interests
  contactLinks {
    __typename
    icon
    platform
    username
    url
  }
}
    `;
export const PlatformsPartsFragmentDoc = gql`
    fragment PlatformsParts on Platforms {
  __typename
  icon
  name
  url
  description
  proficiency
  priority
}
    `;
export const ProgLangsPartsFragmentDoc = gql`
    fragment ProgLangsParts on ProgLangs {
  __typename
  icon
  name
  url
  description
  proficiency
  priority
}
    `;
export const ProjectsPartsFragmentDoc = gql`
    fragment ProjectsParts on Projects {
  __typename
  heroImage
  name
  slug
  workHours
  tldr
  description
  demoUrl
  startDate
  endDate
  progLangs {
    __typename
    programmingLanguage {
      ... on ProgLangs {
        __typename
        icon
        name
        url
        description
        proficiency
        priority
      }
      ... on Document {
        _sys {
          filename
          basename
          hasReferences
          breadcrumbs
          path
          relativePath
          extension
        }
        id
      }
    }
  }
  platforms {
    __typename
    platform {
      ... on Platforms {
        __typename
        icon
        name
        url
        description
        proficiency
        priority
      }
      ... on Document {
        _sys {
          filename
          basename
          hasReferences
          breadcrumbs
          path
          relativePath
          extension
        }
        id
      }
    }
  }
  frameworks {
    __typename
    framework {
      ... on Frameworks {
        __typename
        icon
        name
        url
        description
        proficiency
        priority
      }
      ... on Document {
        _sys {
          filename
          basename
          hasReferences
          breadcrumbs
          path
          relativePath
          extension
        }
        id
      }
    }
  }
  tools {
    __typename
    tool {
      ... on Tools {
        __typename
        icon
        name
        url
        description
        proficiency
        priority
      }
      ... on Document {
        _sys {
          filename
          basename
          hasReferences
          breadcrumbs
          path
          relativePath
          extension
        }
        id
      }
    }
  }
}
    `;
export const ToolsPartsFragmentDoc = gql`
    fragment ToolsParts on Tools {
  __typename
  icon
  name
  url
  description
  proficiency
  priority
}
    `;
export const UserPartsFragmentDoc = gql`
    fragment UserParts on User {
  __typename
  users {
    __typename
    username
    name
    email
    password {
      value
      passwordChangeRequired
    }
  }
}
    `;
export const VolunteerProjectsPartsFragmentDoc = gql`
    fragment VolunteerProjectsParts on VolunteerProjects {
  __typename
  document
  name
  role
  organization
  description
  startDate
  endDate
}
    `;
export const CertificatesDocument = gql`
    query certificates($relativePath: String!) {
  certificates(relativePath: $relativePath) {
    ... on Document {
      _sys {
        filename
        basename
        hasReferences
        breadcrumbs
        path
        relativePath
        extension
      }
      id
    }
    ...CertificatesParts
  }
}
    ${CertificatesPartsFragmentDoc}`;
export const CertificatesConnectionDocument = gql`
    query certificatesConnection($before: String, $after: String, $first: Float, $last: Float, $sort: String, $filter: CertificatesFilter) {
  certificatesConnection(
    before: $before
    after: $after
    first: $first
    last: $last
    sort: $sort
    filter: $filter
  ) {
    pageInfo {
      hasPreviousPage
      hasNextPage
      startCursor
      endCursor
    }
    totalCount
    edges {
      cursor
      node {
        ... on Document {
          _sys {
            filename
            basename
            hasReferences
            breadcrumbs
            path
            relativePath
            extension
          }
          id
        }
        ...CertificatesParts
      }
    }
  }
}
    ${CertificatesPartsFragmentDoc}`;
export const ConceptsDocument = gql`
    query concepts($relativePath: String!) {
  concepts(relativePath: $relativePath) {
    ... on Document {
      _sys {
        filename
        basename
        hasReferences
        breadcrumbs
        path
        relativePath
        extension
      }
      id
    }
    ...ConceptsParts
  }
}
    ${ConceptsPartsFragmentDoc}`;
export const ConceptsConnectionDocument = gql`
    query conceptsConnection($before: String, $after: String, $first: Float, $last: Float, $sort: String, $filter: ConceptsFilter) {
  conceptsConnection(
    before: $before
    after: $after
    first: $first
    last: $last
    sort: $sort
    filter: $filter
  ) {
    pageInfo {
      hasPreviousPage
      hasNextPage
      startCursor
      endCursor
    }
    totalCount
    edges {
      cursor
      node {
        ... on Document {
          _sys {
            filename
            basename
            hasReferences
            breadcrumbs
            path
            relativePath
            extension
          }
          id
        }
        ...ConceptsParts
      }
    }
  }
}
    ${ConceptsPartsFragmentDoc}`;
export const EducationsDocument = gql`
    query educations($relativePath: String!) {
  educations(relativePath: $relativePath) {
    ... on Document {
      _sys {
        filename
        basename
        hasReferences
        breadcrumbs
        path
        relativePath
        extension
      }
      id
    }
    ...EducationsParts
  }
}
    ${EducationsPartsFragmentDoc}`;
export const EducationsConnectionDocument = gql`
    query educationsConnection($before: String, $after: String, $first: Float, $last: Float, $sort: String, $filter: EducationsFilter) {
  educationsConnection(
    before: $before
    after: $after
    first: $first
    last: $last
    sort: $sort
    filter: $filter
  ) {
    pageInfo {
      hasPreviousPage
      hasNextPage
      startCursor
      endCursor
    }
    totalCount
    edges {
      cursor
      node {
        ... on Document {
          _sys {
            filename
            basename
            hasReferences
            breadcrumbs
            path
            relativePath
            extension
          }
          id
        }
        ...EducationsParts
      }
    }
  }
}
    ${EducationsPartsFragmentDoc}`;
export const FrameworksDocument = gql`
    query frameworks($relativePath: String!) {
  frameworks(relativePath: $relativePath) {
    ... on Document {
      _sys {
        filename
        basename
        hasReferences
        breadcrumbs
        path
        relativePath
        extension
      }
      id
    }
    ...FrameworksParts
  }
}
    ${FrameworksPartsFragmentDoc}`;
export const FrameworksConnectionDocument = gql`
    query frameworksConnection($before: String, $after: String, $first: Float, $last: Float, $sort: String, $filter: FrameworksFilter) {
  frameworksConnection(
    before: $before
    after: $after
    first: $first
    last: $last
    sort: $sort
    filter: $filter
  ) {
    pageInfo {
      hasPreviousPage
      hasNextPage
      startCursor
      endCursor
    }
    totalCount
    edges {
      cursor
      node {
        ... on Document {
          _sys {
            filename
            basename
            hasReferences
            breadcrumbs
            path
            relativePath
            extension
          }
          id
        }
        ...FrameworksParts
      }
    }
  }
}
    ${FrameworksPartsFragmentDoc}`;
export const JobsDocument = gql`
    query jobs($relativePath: String!) {
  jobs(relativePath: $relativePath) {
    ... on Document {
      _sys {
        filename
        basename
        hasReferences
        breadcrumbs
        path
        relativePath
        extension
      }
      id
    }
    ...JobsParts
  }
}
    ${JobsPartsFragmentDoc}`;
export const JobsConnectionDocument = gql`
    query jobsConnection($before: String, $after: String, $first: Float, $last: Float, $sort: String, $filter: JobsFilter) {
  jobsConnection(
    before: $before
    after: $after
    first: $first
    last: $last
    sort: $sort
    filter: $filter
  ) {
    pageInfo {
      hasPreviousPage
      hasNextPage
      startCursor
      endCursor
    }
    totalCount
    edges {
      cursor
      node {
        ... on Document {
          _sys {
            filename
            basename
            hasReferences
            breadcrumbs
            path
            relativePath
            extension
          }
          id
        }
        ...JobsParts
      }
    }
  }
}
    ${JobsPartsFragmentDoc}`;
export const LanguagesDocument = gql`
    query Languages($relativePath: String!) {
  Languages(relativePath: $relativePath) {
    ... on Document {
      _sys {
        filename
        basename
        hasReferences
        breadcrumbs
        path
        relativePath
        extension
      }
      id
    }
    ...LanguagesParts
  }
}
    ${LanguagesPartsFragmentDoc}`;
export const LanguagesConnectionDocument = gql`
    query LanguagesConnection($before: String, $after: String, $first: Float, $last: Float, $sort: String, $filter: LanguagesFilter) {
  LanguagesConnection(
    before: $before
    after: $after
    first: $first
    last: $last
    sort: $sort
    filter: $filter
  ) {
    pageInfo {
      hasPreviousPage
      hasNextPage
      startCursor
      endCursor
    }
    totalCount
    edges {
      cursor
      node {
        ... on Document {
          _sys {
            filename
            basename
            hasReferences
            breadcrumbs
            path
            relativePath
            extension
          }
          id
        }
        ...LanguagesParts
      }
    }
  }
}
    ${LanguagesPartsFragmentDoc}`;
export const MeDocument = gql`
    query me($relativePath: String!) {
  me(relativePath: $relativePath) {
    ... on Document {
      _sys {
        filename
        basename
        hasReferences
        breadcrumbs
        path
        relativePath
        extension
      }
      id
    }
    ...MeParts
  }
}
    ${MePartsFragmentDoc}`;
export const MeConnectionDocument = gql`
    query meConnection($before: String, $after: String, $first: Float, $last: Float, $sort: String, $filter: MeFilter) {
  meConnection(
    before: $before
    after: $after
    first: $first
    last: $last
    sort: $sort
    filter: $filter
  ) {
    pageInfo {
      hasPreviousPage
      hasNextPage
      startCursor
      endCursor
    }
    totalCount
    edges {
      cursor
      node {
        ... on Document {
          _sys {
            filename
            basename
            hasReferences
            breadcrumbs
            path
            relativePath
            extension
          }
          id
        }
        ...MeParts
      }
    }
  }
}
    ${MePartsFragmentDoc}`;
export const PlatformsDocument = gql`
    query platforms($relativePath: String!) {
  platforms(relativePath: $relativePath) {
    ... on Document {
      _sys {
        filename
        basename
        hasReferences
        breadcrumbs
        path
        relativePath
        extension
      }
      id
    }
    ...PlatformsParts
  }
}
    ${PlatformsPartsFragmentDoc}`;
export const PlatformsConnectionDocument = gql`
    query platformsConnection($before: String, $after: String, $first: Float, $last: Float, $sort: String, $filter: PlatformsFilter) {
  platformsConnection(
    before: $before
    after: $after
    first: $first
    last: $last
    sort: $sort
    filter: $filter
  ) {
    pageInfo {
      hasPreviousPage
      hasNextPage
      startCursor
      endCursor
    }
    totalCount
    edges {
      cursor
      node {
        ... on Document {
          _sys {
            filename
            basename
            hasReferences
            breadcrumbs
            path
            relativePath
            extension
          }
          id
        }
        ...PlatformsParts
      }
    }
  }
}
    ${PlatformsPartsFragmentDoc}`;
export const ProgLangsDocument = gql`
    query progLangs($relativePath: String!) {
  progLangs(relativePath: $relativePath) {
    ... on Document {
      _sys {
        filename
        basename
        hasReferences
        breadcrumbs
        path
        relativePath
        extension
      }
      id
    }
    ...ProgLangsParts
  }
}
    ${ProgLangsPartsFragmentDoc}`;
export const ProgLangsConnectionDocument = gql`
    query progLangsConnection($before: String, $after: String, $first: Float, $last: Float, $sort: String, $filter: ProgLangsFilter) {
  progLangsConnection(
    before: $before
    after: $after
    first: $first
    last: $last
    sort: $sort
    filter: $filter
  ) {
    pageInfo {
      hasPreviousPage
      hasNextPage
      startCursor
      endCursor
    }
    totalCount
    edges {
      cursor
      node {
        ... on Document {
          _sys {
            filename
            basename
            hasReferences
            breadcrumbs
            path
            relativePath
            extension
          }
          id
        }
        ...ProgLangsParts
      }
    }
  }
}
    ${ProgLangsPartsFragmentDoc}`;
export const ProjectsDocument = gql`
    query projects($relativePath: String!) {
  projects(relativePath: $relativePath) {
    ... on Document {
      _sys {
        filename
        basename
        hasReferences
        breadcrumbs
        path
        relativePath
        extension
      }
      id
    }
    ...ProjectsParts
  }
}
    ${ProjectsPartsFragmentDoc}`;
export const ProjectsConnectionDocument = gql`
    query projectsConnection($before: String, $after: String, $first: Float, $last: Float, $sort: String, $filter: ProjectsFilter) {
  projectsConnection(
    before: $before
    after: $after
    first: $first
    last: $last
    sort: $sort
    filter: $filter
  ) {
    pageInfo {
      hasPreviousPage
      hasNextPage
      startCursor
      endCursor
    }
    totalCount
    edges {
      cursor
      node {
        ... on Document {
          _sys {
            filename
            basename
            hasReferences
            breadcrumbs
            path
            relativePath
            extension
          }
          id
        }
        ...ProjectsParts
      }
    }
  }
}
    ${ProjectsPartsFragmentDoc}`;
export const ToolsDocument = gql`
    query tools($relativePath: String!) {
  tools(relativePath: $relativePath) {
    ... on Document {
      _sys {
        filename
        basename
        hasReferences
        breadcrumbs
        path
        relativePath
        extension
      }
      id
    }
    ...ToolsParts
  }
}
    ${ToolsPartsFragmentDoc}`;
export const ToolsConnectionDocument = gql`
    query toolsConnection($before: String, $after: String, $first: Float, $last: Float, $sort: String, $filter: ToolsFilter) {
  toolsConnection(
    before: $before
    after: $after
    first: $first
    last: $last
    sort: $sort
    filter: $filter
  ) {
    pageInfo {
      hasPreviousPage
      hasNextPage
      startCursor
      endCursor
    }
    totalCount
    edges {
      cursor
      node {
        ... on Document {
          _sys {
            filename
            basename
            hasReferences
            breadcrumbs
            path
            relativePath
            extension
          }
          id
        }
        ...ToolsParts
      }
    }
  }
}
    ${ToolsPartsFragmentDoc}`;
export const UserDocument = gql`
    query user($relativePath: String!) {
  user(relativePath: $relativePath) {
    ... on Document {
      _sys {
        filename
        basename
        hasReferences
        breadcrumbs
        path
        relativePath
        extension
      }
      id
    }
    ...UserParts
  }
}
    ${UserPartsFragmentDoc}`;
export const UserConnectionDocument = gql`
    query userConnection($before: String, $after: String, $first: Float, $last: Float, $sort: String, $filter: UserFilter) {
  userConnection(
    before: $before
    after: $after
    first: $first
    last: $last
    sort: $sort
    filter: $filter
  ) {
    pageInfo {
      hasPreviousPage
      hasNextPage
      startCursor
      endCursor
    }
    totalCount
    edges {
      cursor
      node {
        ... on Document {
          _sys {
            filename
            basename
            hasReferences
            breadcrumbs
            path
            relativePath
            extension
          }
          id
        }
        ...UserParts
      }
    }
  }
}
    ${UserPartsFragmentDoc}`;
export const VolunteerProjectsDocument = gql`
    query volunteerProjects($relativePath: String!) {
  volunteerProjects(relativePath: $relativePath) {
    ... on Document {
      _sys {
        filename
        basename
        hasReferences
        breadcrumbs
        path
        relativePath
        extension
      }
      id
    }
    ...VolunteerProjectsParts
  }
}
    ${VolunteerProjectsPartsFragmentDoc}`;
export const VolunteerProjectsConnectionDocument = gql`
    query volunteerProjectsConnection($before: String, $after: String, $first: Float, $last: Float, $sort: String, $filter: VolunteerProjectsFilter) {
  volunteerProjectsConnection(
    before: $before
    after: $after
    first: $first
    last: $last
    sort: $sort
    filter: $filter
  ) {
    pageInfo {
      hasPreviousPage
      hasNextPage
      startCursor
      endCursor
    }
    totalCount
    edges {
      cursor
      node {
        ... on Document {
          _sys {
            filename
            basename
            hasReferences
            breadcrumbs
            path
            relativePath
            extension
          }
          id
        }
        ...VolunteerProjectsParts
      }
    }
  }
}
    ${VolunteerProjectsPartsFragmentDoc}`;
export type Requester<C= {}> = <R, V>(doc: DocumentNode, vars?: V, options?: C) => Promise<R>
  export function getSdk<C>(requester: Requester<C>) {
    return {
      certificates(variables: CertificatesQueryVariables, options?: C): Promise<{data: CertificatesQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: CertificatesQueryVariables, query: string}> {
        return requester<{data: CertificatesQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: CertificatesQueryVariables, query: string}, CertificatesQueryVariables>(CertificatesDocument, variables, options);
      },
    certificatesConnection(variables?: CertificatesConnectionQueryVariables, options?: C): Promise<{data: CertificatesConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: CertificatesConnectionQueryVariables, query: string}> {
        return requester<{data: CertificatesConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: CertificatesConnectionQueryVariables, query: string}, CertificatesConnectionQueryVariables>(CertificatesConnectionDocument, variables, options);
      },
    concepts(variables: ConceptsQueryVariables, options?: C): Promise<{data: ConceptsQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: ConceptsQueryVariables, query: string}> {
        return requester<{data: ConceptsQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: ConceptsQueryVariables, query: string}, ConceptsQueryVariables>(ConceptsDocument, variables, options);
      },
    conceptsConnection(variables?: ConceptsConnectionQueryVariables, options?: C): Promise<{data: ConceptsConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: ConceptsConnectionQueryVariables, query: string}> {
        return requester<{data: ConceptsConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: ConceptsConnectionQueryVariables, query: string}, ConceptsConnectionQueryVariables>(ConceptsConnectionDocument, variables, options);
      },
    educations(variables: EducationsQueryVariables, options?: C): Promise<{data: EducationsQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: EducationsQueryVariables, query: string}> {
        return requester<{data: EducationsQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: EducationsQueryVariables, query: string}, EducationsQueryVariables>(EducationsDocument, variables, options);
      },
    educationsConnection(variables?: EducationsConnectionQueryVariables, options?: C): Promise<{data: EducationsConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: EducationsConnectionQueryVariables, query: string}> {
        return requester<{data: EducationsConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: EducationsConnectionQueryVariables, query: string}, EducationsConnectionQueryVariables>(EducationsConnectionDocument, variables, options);
      },
    frameworks(variables: FrameworksQueryVariables, options?: C): Promise<{data: FrameworksQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: FrameworksQueryVariables, query: string}> {
        return requester<{data: FrameworksQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: FrameworksQueryVariables, query: string}, FrameworksQueryVariables>(FrameworksDocument, variables, options);
      },
    frameworksConnection(variables?: FrameworksConnectionQueryVariables, options?: C): Promise<{data: FrameworksConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: FrameworksConnectionQueryVariables, query: string}> {
        return requester<{data: FrameworksConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: FrameworksConnectionQueryVariables, query: string}, FrameworksConnectionQueryVariables>(FrameworksConnectionDocument, variables, options);
      },
    jobs(variables: JobsQueryVariables, options?: C): Promise<{data: JobsQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: JobsQueryVariables, query: string}> {
        return requester<{data: JobsQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: JobsQueryVariables, query: string}, JobsQueryVariables>(JobsDocument, variables, options);
      },
    jobsConnection(variables?: JobsConnectionQueryVariables, options?: C): Promise<{data: JobsConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: JobsConnectionQueryVariables, query: string}> {
        return requester<{data: JobsConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: JobsConnectionQueryVariables, query: string}, JobsConnectionQueryVariables>(JobsConnectionDocument, variables, options);
      },
    Languages(variables: LanguagesQueryVariables, options?: C): Promise<{data: LanguagesQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: LanguagesQueryVariables, query: string}> {
        return requester<{data: LanguagesQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: LanguagesQueryVariables, query: string}, LanguagesQueryVariables>(LanguagesDocument, variables, options);
      },
    LanguagesConnection(variables?: LanguagesConnectionQueryVariables, options?: C): Promise<{data: LanguagesConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: LanguagesConnectionQueryVariables, query: string}> {
        return requester<{data: LanguagesConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: LanguagesConnectionQueryVariables, query: string}, LanguagesConnectionQueryVariables>(LanguagesConnectionDocument, variables, options);
      },
    me(variables: MeQueryVariables, options?: C): Promise<{data: MeQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: MeQueryVariables, query: string}> {
        return requester<{data: MeQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: MeQueryVariables, query: string}, MeQueryVariables>(MeDocument, variables, options);
      },
    meConnection(variables?: MeConnectionQueryVariables, options?: C): Promise<{data: MeConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: MeConnectionQueryVariables, query: string}> {
        return requester<{data: MeConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: MeConnectionQueryVariables, query: string}, MeConnectionQueryVariables>(MeConnectionDocument, variables, options);
      },
    platforms(variables: PlatformsQueryVariables, options?: C): Promise<{data: PlatformsQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: PlatformsQueryVariables, query: string}> {
        return requester<{data: PlatformsQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: PlatformsQueryVariables, query: string}, PlatformsQueryVariables>(PlatformsDocument, variables, options);
      },
    platformsConnection(variables?: PlatformsConnectionQueryVariables, options?: C): Promise<{data: PlatformsConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: PlatformsConnectionQueryVariables, query: string}> {
        return requester<{data: PlatformsConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: PlatformsConnectionQueryVariables, query: string}, PlatformsConnectionQueryVariables>(PlatformsConnectionDocument, variables, options);
      },
    progLangs(variables: ProgLangsQueryVariables, options?: C): Promise<{data: ProgLangsQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: ProgLangsQueryVariables, query: string}> {
        return requester<{data: ProgLangsQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: ProgLangsQueryVariables, query: string}, ProgLangsQueryVariables>(ProgLangsDocument, variables, options);
      },
    progLangsConnection(variables?: ProgLangsConnectionQueryVariables, options?: C): Promise<{data: ProgLangsConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: ProgLangsConnectionQueryVariables, query: string}> {
        return requester<{data: ProgLangsConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: ProgLangsConnectionQueryVariables, query: string}, ProgLangsConnectionQueryVariables>(ProgLangsConnectionDocument, variables, options);
      },
    projects(variables: ProjectsQueryVariables, options?: C): Promise<{data: ProjectsQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: ProjectsQueryVariables, query: string}> {
        return requester<{data: ProjectsQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: ProjectsQueryVariables, query: string}, ProjectsQueryVariables>(ProjectsDocument, variables, options);
      },
    projectsConnection(variables?: ProjectsConnectionQueryVariables, options?: C): Promise<{data: ProjectsConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: ProjectsConnectionQueryVariables, query: string}> {
        return requester<{data: ProjectsConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: ProjectsConnectionQueryVariables, query: string}, ProjectsConnectionQueryVariables>(ProjectsConnectionDocument, variables, options);
      },
    tools(variables: ToolsQueryVariables, options?: C): Promise<{data: ToolsQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: ToolsQueryVariables, query: string}> {
        return requester<{data: ToolsQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: ToolsQueryVariables, query: string}, ToolsQueryVariables>(ToolsDocument, variables, options);
      },
    toolsConnection(variables?: ToolsConnectionQueryVariables, options?: C): Promise<{data: ToolsConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: ToolsConnectionQueryVariables, query: string}> {
        return requester<{data: ToolsConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: ToolsConnectionQueryVariables, query: string}, ToolsConnectionQueryVariables>(ToolsConnectionDocument, variables, options);
      },
    user(variables: UserQueryVariables, options?: C): Promise<{data: UserQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: UserQueryVariables, query: string}> {
        return requester<{data: UserQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: UserQueryVariables, query: string}, UserQueryVariables>(UserDocument, variables, options);
      },
    userConnection(variables?: UserConnectionQueryVariables, options?: C): Promise<{data: UserConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: UserConnectionQueryVariables, query: string}> {
        return requester<{data: UserConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: UserConnectionQueryVariables, query: string}, UserConnectionQueryVariables>(UserConnectionDocument, variables, options);
      },
    volunteerProjects(variables: VolunteerProjectsQueryVariables, options?: C): Promise<{data: VolunteerProjectsQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: VolunteerProjectsQueryVariables, query: string}> {
        return requester<{data: VolunteerProjectsQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: VolunteerProjectsQueryVariables, query: string}, VolunteerProjectsQueryVariables>(VolunteerProjectsDocument, variables, options);
      },
    volunteerProjectsConnection(variables?: VolunteerProjectsConnectionQueryVariables, options?: C): Promise<{data: VolunteerProjectsConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: VolunteerProjectsConnectionQueryVariables, query: string}> {
        return requester<{data: VolunteerProjectsConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: VolunteerProjectsConnectionQueryVariables, query: string}, VolunteerProjectsConnectionQueryVariables>(VolunteerProjectsConnectionDocument, variables, options);
      }
    };
  }
  export type Sdk = ReturnType<typeof getSdk>;

// TinaSDK generated code
import { createClient, TinaClient } from "tinacms/dist/client";

const generateRequester = (
  client: TinaClient,
) => {
  const requester: (
    doc: any,
    vars?: any,
    options?: {
      branch?: string,
      /**
       * Aside from `method` and `body`, all fetch options are passed
       * through to underlying fetch request
       */
      fetchOptions?: Omit<Parameters<typeof fetch>[1], 'body' | 'method'>,
    },
    client
  ) => Promise<any> = async (doc, vars, options) => {
    let url = client.apiUrl
    if (options?.branch) {
      const index = client.apiUrl.lastIndexOf('/')
      url = client.apiUrl.substring(0, index + 1) + options.branch
    }
    const data = await client.request({
      query: doc,
      variables: vars,
      url,
    }, options)

    return { data: data?.data, errors: data?.errors, query: doc, variables: vars || {} }
  }

  return requester
}

/**
 * @experimental this class can be used but may change in the future
 **/
export const ExperimentalGetTinaClient = () =>
  getSdk(
    generateRequester(
      createClient({
        url: "/api/tina/gql",
        queries,
      })
    )
  )

export const queries = (
  client: TinaClient,
) => {
  const requester = generateRequester(client)
  return getSdk(requester)
}

  